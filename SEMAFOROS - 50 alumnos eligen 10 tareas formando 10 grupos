8. Suponga que se tiene un curso con 50 alumnos. Cada alumno elije una de las 10 tareas para realizar entre todos. Una vez que todos
los alumnos eligieron su tarea comienzan a realizarla. Cada vez que un alumno termina su tarea le avisa al profesor y se queda 
esperando el puntaje del grupo. Cuando todos los alumnos que tenían la misma tarea terminaron el profesor les otorga un puntaje 
que representa el orden en que se terminó esa tarea. Nota: Para elegir la tarea suponga que existe una función elegir que le 
asigna una tarea a un alumno (esta función asignará 10 tareas diferentes entre 50 alumnos, es decir, que 5 alumnos tendrán la tarea 1,
otros 5 la tarea 2 y así sucesivamente para las 10 tareas). 

sem mutex = 1; // Semáforo para garantizar exclusión mutua.
sem tareaListas = 0; // Este semáforo se utiliza para asegurarse de que todos los alumnos hayan elegido sus tareas antes de comenzar a realizarlas. Inicialmente, todos los alumnos esperarán en este semáforo.
sem[] tareaElegida = ([10] 0); // Un semáforo para cada tarea.
int[] contadorTareas = ([10] 0); // Contador para el número de alumnos que eligieron cada tarea.
int[] contadorTareasTerminadas = ([10] 0); // Contador para el número de alumnos que terminaron cada tarea.

process Alumno[id: 1..50] {
    int tareaAsignada = elegir(); // Función para asignar una tarea a cada alumno.

    P(mutex);
    contadorTareas[tareaAsignada]++; contador correspondiente a la tarea elegida se incrementa para registrar que un alumno ha elegido esta tarea.
    if (contadorTareas[tareaAsignada] == 5) {//Si ya hay cinco alumnos que eligieron la //misma tarea
        V(tareaElegida[tareaAsignada]);//se libera el semáforo tareaElegida asociado a esa //tarea para permitir que los alumnos que eligieron esa tarea comiencen a trabajar en ella. //Esto garantiza que todos los alumnos con la misma tarea esperen hasta que se complete //el grupo.
    }
    V(mutex);// se libera el semaforo mutex 

    // Esperar a que todos los alumnos elijan su tarea antes de comenzar.
    P(tareaListas);

    // Realizar la tarea...

    // Avisar al profesor que ha terminado.
    P(mutex);
    contadorTareasTerminadas[tareaAsignada]++;//El contador correspondiente a la tarea //elegida se incrementa para registrar que un alumno ha terminado esta tarea.
    if (contadorTareasTerminadas[tareaAsignada] == 5) {//Si ya hay cinco alumnos que //terminaron la misma tarea
        V(tareaElegida[tareaAsignada]); //se libera el semáforo tareaElegida asociado a esa //tarea. Esto permite que el profesor asigne un puntaje a ese grupo de tareas.
    }
    V(mutex);//se libera el mutex 
}

process Profesor {
    // Esperar a que todos los alumnos elijan sus tareas antes de comenzar.
    for (int tarea = 1; tarea <= 10; tarea++) {// se itera sobre las tareas
        P(tareaElegida[tarea]);
    }
    V(tareaListas); // Desbloquear a los alumnos para que comiencen a trabajar.

    for (int tarea = 1; tarea <= 10; tarea++) {
        P(tareaElegida[tarea])//;asegura que el profesor no avance hasta que todos los //grupos de tareas hayan sido terminados por al menos 5 alumnos.

        //Después de esperar a que se libere el semáforo de una tarea específica, Asignar un //puntaje a los 5 alumnos que terminaron la tarea.
        asignarPuntaje(tarea);

        // Volver a 0 los contadores.
        P(mutex);
        contadorTareas[tarea] = 0;
        contadorTareasTerminadas[tarea] = 0;
        V(mutex);
    }
}
